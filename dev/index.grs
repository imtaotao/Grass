<template>
  <div>
    <div @click.self.stop.prevent="this.callback.bind(this)">
      <span>dsf</span>
      点击
    </div>
    <span v-for="val of arr">{{ val }}</span>
    <div>
      
    </div>

    <Childd test1="api" :test2="api" :show="true" :api="api">
      <div slot="tao">{{api}}</div>
      tt
      <bb slot='fangfang'></bb>
    </Childd>
    <div v-for="val of arr"  v-transition.animate="'slide-fade'" v-show="show">fsda</div>

    <Childd :show="true"/>
    <response />
  </div>
</template>

<script>
  import Grass, { CSSModules } from '../src'
  import Child from './child'
  import style from './style.css'
  import response from './response.grs'
  // import Vue from 'vue'

  // const vm = new Vue({
  //   data: {
  //     api: 'index',
  //     arr: [1, 2],
  //     show: true,
  //     obj: {
  //       tt: 'chentao',
  //       ff: 'fangfang'
  //     }
  //   }
  // })

  @CSSModules(style)
  class Root extends Grass.Component {
    constructor () {
      super()
      this.createResponseState({
        api: 'index',
        arr: [1, 2],
        show: true,
        obj: {
          tt: 'chentao',
          ff: 'fangfang'
        }
      })

      window.ss = this.state
    }

    create () {
      Child.listener('tt', this.testListener)
    }

    willUpdate () {
      console.log(121);
    }

    callback (api) {
      // this.setState({
      //   show: !this.state.show,
      //   arr: [1, 2, 3, 4, 5],
      //   api: 'taotao',
      // })

      // console.log(this.getComponent('Child'));
      console.log(this);
      this.state.show = !this.state.show
      this.state.arr = [1, 2, 3, 4, 5]
      this.state.api = 'taotao'
      
      Child.remove(this.testListener)
    }

    testListener (data) {
      console.log(data)
    }

    beforeEnter (dom) {
      // console.log(dom);
      // console.log('beforeEnter');
    }

    afterEnter (dom) {
      // console.log('afterEnter');
    }

    beforeLeave (dom) {
      // console.log('beforeLeave');
    }

    afterLeave (dom) {
      // console.log('afterLeave');
    }

    component () {
      return {
        response,
        Childd: Grass.async((resolve, reject) => {
          return {
            component: new Promise((re) => {
              setTimeout(() => {
                re(import('./child.grs'))
              }, 2000)
            }),
            error: Grass.async((resolve) => {
              return {
                component: new Promise(re => {
                  setTimeout(() => {
                    resolve(error)
                  }, 6000)
                })
              }
            }),
            // error,
            timeout: 3000,
            // loading,
            loading: Grass.async(() => import('./response.grs')),
          }
        }, (err, cm) => {
          console.dir(cm);
        }),
        // Child,
        bb: function bb (props, parent) {
          props.a = 121
          console.log(props, parent, this);
          return `<div>{{a}} taotao</div>`
        }
      }
    }
  }

  function loading () {
    return '<div> loading </div>'
  }

  function error () {
    return '<div> error </div>'
  }


  Grass.directive('tt', (dom, val) => {
    // console.log(dom, val);
  })
  
  Grass.mount(document.getElementById('root'), Root)
</script>